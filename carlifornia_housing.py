# -*- coding: utf-8 -*-
"""Carlifornia_housing.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1q4JBozucIK7pZvEwSb17HL2Zv-eXu7lW

1. Import Required Libraries:
"""

import tensorflow as tf
from tensorflow import keras
import numpy as np
import matplotlib.pyplot as plt

"""2. Load and Preprocess Data:

"""

california_housing = keras.datasets.california_housing
(x_train, y_train), (x_test, y_test) = california_housing.load_data()

"""3. Scale the features:
*italicized text*
"""

from sklearn.preprocessing import StandardScaler
scaler = StandardScaler()
x_train = scaler.fit_transform(x_train)
x_test = scaler.transform(x_test)

"""4.Reshape the target variable"""

y_train = y_train.reshape(-1, 1)
y_test = y_test.reshape(-1, 1)

"""5.Define the model:"""

# Define the model for regression with 8 input features and 1 output (the house price)
model = keras.Sequential([
    # Input layer: A Dense layer is more appropriate for tabular data with a fixed number of features.
    # The input_shape should match the number of features (8).
    keras.layers.Dense(128, activation='relu', input_shape=(x_train.shape[1],)), # Use x_train.shape[1] to dynamically get the number of features
    keras.layers.Dropout(0.2), # Optional: Prevents overfitting
    keras.layers.Dense(64, activation='relu'), # Another hidden layer
    keras.layers.Dense(1) # Output layer: A single neuron with no activation for regression
])

"""6. Compile the model:"""

model.compile(optimizer='adam',
 loss='mean_squared_error', # This loss is for classification, not regression
 metrics=['mean_absolute_error'])

"""7.Train the model"""

model.fit(x_train, y_train, epochs=10, validation_data=(x_test, y_test))

"""8. Evaluate the model:"""

test_loss, test_acc = model.evaluate(x_test, y_test)
print(f'Accuracy: {test_acc}')
predictions = model.predict(x_test)

"""9.Visualize actual vs predicted values:"""

plt.figure(figsize=(10, 6))
plt.scatter(y_test[:100], predictions[:100], alpha=0.5) # Plot actual vs predicted for first 100 samples
plt.xlabel("Actual House Price")
plt.ylabel("Predicted House Price")
plt.title("Actual vs Predicted House Prices (First 100 Samples)")
plt.grid(True)
plt.show()

